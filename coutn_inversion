int merge(vector<int>&arr,int low,int mid,int high){
    vector<int>temp;
    int left = low;
    int right = mid + 1;

    int count = 0;

    while(left <= mid && right <= high){
        if(arr[left] <= arr[right]){
            temp.push_back(arr[left]);
            left++;
        }
        else{
            count += mid-left+1;
            temp.push_back(arr[right]);
            right++;
        }
    }

    while(left<=mid){
        temp.push_back(arr[left]);
        left++;
    }
    while(right<=high){
        temp.push_back(arr[right]);
        right++;
    }

    for(int i=low;i<=high;i++){
        arr[i] = temp[i-low];
    }
    return count;
}
int MS(vector<int>&arr , int low , int high){
    int count = 0;
    if(low==high){
        return count;
    }

    int mid =( low + high)/2;

    count += MS(arr,low , mid);
   count +=  MS(arr,mid+1,high);
    count += merge(arr,low,mid,high);

    return count;
}
int numberOfInversions(vector<int>&a, int n) {
    // Write your code here.
    return MS(a,0,n-1);
}
